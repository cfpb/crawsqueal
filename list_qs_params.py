#!/usr/bin/env python3

# Given a pages.csv file generated by "read_warc.py dump_csvs", output a list
# of query string parameters used across all page URLs. Useful for creating a
# proper --reject-regex parameter for wget, for example:
#
# ./list_qs_params.py pages.csv \
#     --ignore-param=page \
#     --ignore-param=ext_url \
#     --ignore-param=signature \
#     --wget-reject-regex
#
# This command will dump out a list of query string parameters, excluding
# "page", "ext_url", and "signature" in a format compatible with
# wget --reject-regex:
#
# CatID=|NavCode=|_gl=|activity_type=|...
#
# See relevant wget documentation at:
#
# https://www.gnu.org/software/wget/manual/html_node/Recursive-Accept_002fReject-Options.html
import argparse
import csv
from itertools import chain
from operator import itemgetter
from urllib.parse import parse_qs, urlparse


def list_qs_params(pages_csv, ignore_param, wget_reject_regex):
    reader = csv.reader(pages_csv)
    urls = list(map(itemgetter(1), reader))
    params = sorted(set(chain(*(parse_qs(urlparse(url).query).keys() for url in urls))))
    params = [p for p in params if p not in ignore_param]

    if wget_reject_regex:
        print("|".join(f"{param}=" for param in params))
    else:
        print(params)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("pages_csv", type=argparse.FileType("r", encoding="utf-8"))
    parser.add_argument("--ignore-param", nargs="*", default=[])
    parser.add_argument("--wget-reject-regex", action="store_true")

    args = parser.parse_args()

    list_qs_params(**vars(args))
